
defining get_absolute_url to redirect to profile/login page after creating a user


uploading several images ONE BY ONE
updating the uploaded images

sportclubs should change their password in first_login

salons is_confirmed field must be set to False when sportclubs updates them

salons must have a pending filed that when a masteruser told them to change your salon other masterusers
doesn't see that salon in unpublished list


url mapping for commonusers for seeing salon



delete migrations and makemigrations initially
PYINSTALLER

masterusers should update their pictures and password

for setting price in sessions with sportclub their bank account details must be defined


fixing redirect for superuser required login page




def get_success_url(self):
		slug = self.kwargs['slug']
		return reverse("accounts:profile", kwargs={'slug': slug})

---------------------------------------------------------------------------------------------
when masteruser deletes or banes sth he should send an email of why to the owner

everything that a master user done must be result in a reverse to a profile page because
e.g. we can ban a salon from two ways and they should not endup both in the unconfirmedsalon list

deleting the confirm page for delete and ban and unbaning masterusers via superusers

in front part all delete ban or unbans must be asked for a confirm in a pop up show


prefix for urls for adding the ability to other usages of this website

page for admin profile and settings

git push --force-with-lease origin master\\\\\

Restrict users to only see books created by them and published

time model must be generated daily automatically for 1 year length






useful method to deal with a specific object
def detale_bajki(request, slug):
	    detale_bajki = get_object_or_404(Wpisy, slug=slug)


method for using function decorators on CBVs
@method_decorator([login_required, sportclub_required], name='dispatch')

{
Every Profile Page must be protected with this for CBVs:
restricting every user to be able to see only objects created by them:
	def get_queryset(self):
		if self.request.user.is_authenticated:
			return Book.objects.filter(is_published=True, user=self.request.user)
		else:
			return Book.objects.none()

and these for function views:

sportclub = get_object_or_404(SportClubModel, slug=slug)
	if sportclub == request.user.sportclubs:
}
